name: Build App Container Image for Staging

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  build-app: # Steps to build staging application
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io # GitHub Container Registry
      IMAGE_NAME: ${{ github.repository }} # github.repository as <account>/<repo>
      ENV_BASE64: ${{ secrets.ENV_BASE64_DEV }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout # Checkout the repository
        uses: actions/checkout@v4
      - name: Create .env file # Create .env file
        if: env.ENV_BASE64 != ''
        run: echo "$ENV_BASE64" | base64 -d > .env
      - name: Add variable for application # Add variable for application
        run: |
          echo "APP_VERSION_HASH=${{ github.sha }}" >> .constants

      # Composer Setup
      - name: Composer Install # Install composer dependencies
        uses: "ramsey/composer-install@v3"
        with:
          composer-options: "--ignore-platform-reqs --optimize-autoloader --no-dev"

      # NPM Setup
      - name: NPM Setup # Install NPM dependencies
        uses: bahmutov/npm-install@v1

      - name: NPM Build # Build NPM assets
        run: npx vite build

      # Build Cache
      - name: Build Cache
        run: |
          php artisan event:cache
          php artisan route:cache
          sudo mkdir -p /var/www/vhosts/localhost
          sudo cp -a {.,}[!.]* /var/www/vhosts/localhost
          sudo chmod -R 777 /var/www/vhosts/localhost
          cd /var/www/vhosts/localhost
          php artisan config:cache
      - name: Output Cache as Artifact for volumes
        uses: actions/upload-artifact@v4
        with:
          name: env-cache
          path: /var/www/vhosts/localhost/bootstrap/cache
          retention-days: 1

      - name: Setup QEMU # Setup QEMU
        uses: docker/setup-qemu-action@v3
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
      - name: Setup Docker Buildx # Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''

      - name: Login to GitHub Container Registry # Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get & Set Container Metadata # Get & Set Container Metadata
        id: meta-packages
        uses: docker/metadata-action@v5
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Clean Build App # Remove unused files & dirs
        run: rm -rf node_modules public/debug.php resources/css resources/fonts resources/images resources/js resources/vue stubs tests cypress .git .github .gitlab .gitattributes .gitignore .vscode .editorconfig .env .env.example .styleci.yml .eslintignore .eslintrc.js .phpunit.result.cache .stylelintrc.json package.json package-lock.json pint.json tsconfig.json tsconfig.node.json *.yaml *.md *.lock *.xml *.yml *.ts *.jsyml *.ts *.js *.sh
      - name: Build & Push Container # Build & Push Container
        uses: docker/build-push-action@v5
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-packages.outputs.tags }}-staging
          labels: ${{ steps.meta-packages.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  delete-artifacts-and-cache: # Steps to clean up stale artifacts and cache
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Delete Artifacts # Delete Artifacts
        uses: jimschubert/delete-artifacts-action@v1
        with:
          log_level: "debug"
          min_bytes: "0"
          active_duration: "30m"
